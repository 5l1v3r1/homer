# Initial Version Copyright (C) Homer Project 2012-2015 (http://www.sipcapture.org).
# Licensed to the User under the GPL license.
# Author: Konstantin S. Vishnivetsky

ALL_DISTROS = @ALL_DISTROS@
# variable not used here, but can be used in */.@PACKAGE_NAME@ files
DEB_DIST = @DEB_DIST@

# Allows to target other distros other than the default
help.*.deb = Build single rpm for $(DISTRO).
help.@PACKAGE_NAME@.deb = Builds all @PACKAGE_NAME@ debs for $(DISTRO).
help.lib.deb = Builds all dependencies needed for @PACKAGE_NAME@ for building for $(DISTRO).
$(foreach D,$(ALL_DISTROS),$(eval help-more.$(D).*.deb = Build single deb for $(D).))
$(foreach D,$(ALL_DISTROS),$(eval help-more.$(D).@PACKAGE_NAME@.deb = Builds all @PACKAGE_NAME@ debs for $(D).))
$(foreach D,$(ALL_DISTROS),$(eval help-more.$(D).lib.deb = Builds all dependencies needed for @PACKAGE_NAME@ for building for $(D).))
help-more.distros.* = Build deb(s) for all distributions: $(ALL_DISTROS)
$(ALL_DISTROS:=.%) : SUB_DISTRO=$(word 1,$(subst ., ,$@))
$(ALL_DISTROS:=.%) : SUBMAKE_VARS=DISTRO=$(SUB_DISTRO)
distro.all.% distros.% :
# split into separate bash commands so each command gets separate make environment..
# Use command && command && true to ensure a failure in one aborts the build
	$(foreach D,$(ALL_DISTROS),$(MAKE) $(D).$* &&) true

# NOTE: 'eval' because 'make a b' when makefile is
#   a.% b.% :; x
# only makes x once. usually not what you want and not what we want here
$(foreach D,$(ALL_DISTROS), $(eval $(D).% :; $$(MAKE) $$* $$(SUBMAKE_VARS)))

@PACKAGE_NAME@.deb : repo-update $(@PACKAGE_NAME@:=.deb.if-changed);

lib.deb : repo-update $(lib:=.deb.if-changed);

@PACKAGE_NAME@.deb.changes lib.deb.changes : %.deb.changes :
	@echo $(foreach P,$($*),\
	   $(shell $(SRC)/tools/dep check $(DISTRO).$(P).deb $(SRC)/$(P) \
	       $(foreach D,$($(P)_DEPS),$(DISTRO).$(D).deb)))

$(@PACKAGE_NAME@:=.deb.changes) $(lib:=.deb.changes) :
	$(SRC)/tools/dep changes $(DISTRO).$(PROJ).deb $(SRC)/$(PROJ) \
	       $(foreach D,$($(PROJ)_DEPS),$(DISTRO).$(D).deb)

.SECONDEXPANSION:
$(@PACKAGE_NAME@:=.deb.if-changed) $(lib:=.deb.if-changed) : %.deb.if-changed : $$($$*_GIT_SUBMODULE) $(addprefix $(SRC)/,$(custommodules))
	@echo -n 'checking for changes in $*...'
	@$(MAKE) -s nop $(shell $(SRC)/tools/dep check $(DISTRO).$(PROJ).deb $(SRC)/$(PROJ) \
	       $(foreach D,$($(PROJ)_DEPS),$(DISTRO).$(D).deb))

%.distdir : %.autoreconf %.configure
	@echo "make distdir for $*..."
	$(MAKE) -C $(PROJ) distdir=. am__remove_distdir= distdir

%.deb : %.distdir
	@echo 'Building DEB for $*...'
	if [ -n "$($(PROJ)_DEB)" ]; then \
	  $(MAKE) -C $(PROJ) deb; \
	else \
	  if [ -d debian ]; then \
	    (cd $(PROJ) && dpkg-buildpackage -rfakeroot -tc && rm debian); \
	  else \
	    (cd $(PROJ) && ln -s pkg/debian debian && dpkg-buildpackage -rfakeroot -tc && rm debian); \
	  fi; \
	fi;

repo-quick-update repo-update :
	@echo "Dummy target repo-update"
