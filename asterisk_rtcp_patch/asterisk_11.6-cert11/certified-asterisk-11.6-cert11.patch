diff -udprP certified-asterisk-11.6-cert11.orig/channels/chan_sip.c certified-asterisk-11.6-cert11/channels/chan_sip.c
--- certified-asterisk-11.6-cert11.orig/channels/chan_sip.c	2014-12-10 15:27:26.000000000 +0100
+++ certified-asterisk-11.6-cert11/channels/chan_sip.c	2015-09-09 16:29:44.000000000 +0200
@@ -282,6 +282,7 @@ ASTERISK_FILE_VERSION(__FILE__, "$Revisi
 #include "sip/include/dialplan_functions.h"
 #include "sip/include/security_events.h"
 #include "asterisk/sip_api.h"
+#include "hep.h"
 
 /*** DOCUMENTATION
 	<application name="SIPDtmfMode" language="en_US">
@@ -2431,6 +2432,7 @@ static const char *sip_reason_code_to_st
 	(ret); \
 })
 
+
 /*! \brief
  * duplicate a list of channel variables, \return the copy.
  */
@@ -3894,6 +3896,61 @@ static void ast_sip_ouraddrfor(const str
 	ast_debug(3, "Setting SIP_TRANSPORT_%s with address %s\n", sip_get_transport(p->socket.type), ast_sockaddr_stringify(us));
 }
 
+
+static inline uint8_t get_uinttransport(enum sip_transport t)
+{
+        switch (t) {
+        case SIP_TRANSPORT_UDP:
+                return IPPROTO_UDP;
+        case SIP_TRANSPORT_TCP:
+                return IPPROTO_TCP;
+        case SIP_TRANSPORT_TLS:
+                return IPPROTO_TCP;
+        default:
+               return IPPROTO_UDP;
+        }
+
+        return IPPROTO_UDP;
+}
+
+
+static void ast_get_ouraddrfor(const struct ast_sockaddr *them, struct ast_sockaddr *us, enum sip_transport type) {
+
+
+                //ast_sockaddr_copy(us, &internip); 
+                ast_ouraddrfor(them, us);
+
+		switch (type) {		
+		
+ 		   case SIP_TRANSPORT_TCP:
+			if (!ast_sockaddr_is_any(&sip_tcp_desc.local_address)) {
+				ast_sockaddr_copy(us,
+						  &sip_tcp_desc.local_address);
+			} else {
+				ast_sockaddr_set_port(us,
+						      ast_sockaddr_port(&sip_tcp_desc.local_address));
+			}
+			break;
+		    case SIP_TRANSPORT_TLS:
+			if (!ast_sockaddr_is_any(&sip_tls_desc.local_address)) {
+				ast_sockaddr_copy(us,
+						  &sip_tls_desc.local_address);
+			} else {
+				ast_sockaddr_set_port(us,
+						      ast_sockaddr_port(&sip_tls_desc.local_address));
+			}
+			break;
+		case SIP_TRANSPORT_UDP:
+		default:
+			if (!ast_sockaddr_is_any(&bindaddr)) {
+				ast_sockaddr_copy(us, &bindaddr);
+			}
+			if (!ast_sockaddr_port(us)) {
+				ast_sockaddr_set_port(us, ast_sockaddr_port(&bindaddr));
+			}
+		}
+}
+
 /*! \brief Append to SIP dialog history with arg list  */
 static __attribute__((format(printf, 2, 0))) void append_history_va(struct sip_pvt *p, const char *fmt, va_list ap)
 {
@@ -4591,17 +4648,61 @@ static void add_required_respheader(stru
 static int send_response(struct sip_pvt *p, struct sip_request *req, enum xmittype reliable, uint32_t seqno)
 {
 	int res;
+        rc_info_t *rcinfo = NULL;
+	struct timeval now;
 
 	finalize_content(req);
 	add_blank(req);
+	
+	const struct ast_sockaddr *dst = sip_real_dst(p);	
+	
 	if (sip_debug_test_pvt(p)) {
-		const struct ast_sockaddr *dst = sip_real_dst(p);
 
 		ast_verbose("\n<--- %sTransmitting (%s) to %s --->\n%s\n<------------>\n",
 			reliable ? "Reliably " : "", sip_nat_mode(p),
 			ast_sockaddr_stringify(dst),
 			ast_str_buffer(req->data));
 	}
+	
+	/*  HEP */	
+ 	 /*
+	ast_verbose("\r\n<!------------------------------------------------------------------------!>\r\n");
+	ast_verbose("DATA:REQ SOURCE IP/PORT:[%s]:[%d]\n", ast_sockaddr_stringify_addr(&p->ourip), ast_sockaddr_port(&p->ourip));
+	ast_verbose("PROTO: [%s]\n",get_transport_pvt(p));
+	ast_verbose("DATA: DESTINATION IP/PORT: [%s]:[%d]\n", ast_sockaddr_stringify_addr(dst), ast_sockaddr_port(dst));
+	ast_verbose("JOPA: [%s]\n", req->data->str);
+	ast_verbose("\r\n<!------------------------------------------------------------------------!>\r\n");
+	*/
+	rcinfo = malloc(sizeof(rc_info_t));
+	memset(rcinfo, 0, sizeof(rc_info_t));
+	gettimeofday(&now,NULL);	
+	
+	/* source IP / port */
+	setip_to_rcinfo(rcinfo, &p->ourip, 0);
+	/* destination IP / port */
+	setip_to_rcinfo(rcinfo, (struct ast_sockaddr *) dst, 1);
+	                         	
+        rcinfo->ip_proto   = get_uinttransport(p->socket.type);
+        rcinfo->time_sec   = now.tv_sec;
+        rcinfo->time_usec  = now.tv_usec;
+        rcinfo->uuid       = (char *)p->callid;                
+        rcinfo->proto_type = 0x01;
+
+	res = send_hepv3 (sipsock, rcinfo, req->data->str, ast_str_strlen(req->data), 0);
+	
+	if (res == -1) {
+		switch (errno) {
+		case EBADF: 		/* Bad file descriptor - seems like this is generated when the host exist, but doesn't accept the UDP packet */
+		case EHOSTUNREACH: 	/* Host can't be reached */
+		case ENETDOWN: 		/* Interface down */
+		case ENETUNREACH:	/* Network failure */
+		case ECONNREFUSED:      /* ICMP port unreachable */
+			res = XMIT_ERROR;	/* Don't bother with trying to transmit again */
+		}
+	}
+        
+        free(rcinfo);
+		
 	if (p->do_history) {
 		struct sip_request tmp = { .rlpart1 = 0, };
 		parse_copy(&tmp, req);
@@ -7861,13 +7962,22 @@ static struct ast_channel *sip_new(struc
 		ast_channel_set_fd(tmp, 1, ast_rtp_instance_fd(i->rtp, 1));
 		ast_rtp_instance_set_write_format(i->rtp, &fmt);
 		ast_rtp_instance_set_read_format(i->rtp, &fmt);
+
+		/*HEP*/
+		ast_rtp_instance_set_uuid(i->rtp, (void *)i->callid);
 	}
 	if (needvideo && i->vrtp) {
 		ast_channel_set_fd(tmp, 2, ast_rtp_instance_fd(i->vrtp, 0));
 		ast_channel_set_fd(tmp, 3, ast_rtp_instance_fd(i->vrtp, 1));
+
+		/*HEP*/
+		ast_rtp_instance_set_uuid(i->rtp, (void *)i->callid);
 	}
 	if (needtext && i->trtp) {
 		ast_channel_set_fd(tmp, 4, ast_rtp_instance_fd(i->trtp, 0));
+
+		/* HEP */
+		ast_rtp_instance_set_uuid(i->rtp, (void *)i->callid);
 	}
 	if (i->udptl) {
 		ast_channel_set_fd(tmp, 5, ast_udptl_fd(i->udptl));
@@ -28285,6 +28395,12 @@ static int handle_request_do(struct sip_
 	struct ast_channel *owner_chan_ref = NULL;
 	int recount = 0;
 	int nounlock = 0;
+	struct ast_sockaddr ourip;
+	int res;
+	rc_info_t *rcinfo = NULL;
+	struct timeval now;
+	struct sip_request reqcpy = { 0, };
+
 
 	if (sip_debug_test_addr(addr))	/* Set the debug flag early on packet level */
 		req->debug = 1;
@@ -28294,6 +28410,8 @@ static int handle_request_do(struct sip_
 		ast_verbose("\n<--- SIP read from %s:%s --->\n%s\n<------------->\n",
 			sip_get_transport(req->socket.type), ast_sockaddr_stringify(addr), ast_str_buffer(req->data));
 	}
+	
+        copy_request(&reqcpy, req);	 
 
 	if (parse_request(req) == -1) { /* Bad packet, can't parse */
 		ast_str_reset(req->data); /* nulling this out is NOT a good idea here. */
@@ -28308,6 +28426,7 @@ static int handle_request_do(struct sip_
 		ast_str_reset(req->data); /* nulling this out is NOT a good idea here. */
 		return 1;
 	}
+	
 	ast_mutex_lock(&netlock);
 
 	/* Find the active SIP dialog or create a new one */
@@ -28335,6 +28454,62 @@ static int handle_request_do(struct sip_
 		req->authenticated = 1;
 	}
 
+	/* NOW DO HEP */		
+	ast_sockaddr_copy(&ourip, &internip);
+        ast_get_ouraddrfor(addr, &ourip, req->socket.type);	
+
+        /*                
+	ast_verbose("\r\n<!------------------------------------------------------------------------!>\r\n");
+	ast_verbose("DATA:REQ REMOTE IP/PORT:[%s]:[%d]\n", ast_sockaddr_stringify_addr(&ourip), ntohs(req->socket.port));
+	ast_verbose("PROTO: [%s]\n",get_transport(req->socket.type));
+	ast_verbose("DATA: SOURCE IP/PORT: [%s]:[%d]\n", ast_sockaddr_stringify_addr(addr), ast_sockaddr_port(addr));
+	ast_verbose("XPEH: [%s]\n", reqcpy.data->str);
+	ast_verbose("\r\n<!------------------------------------------------------------------------!>\r\n");
+	*/
+
+	rcinfo = malloc(sizeof(rc_info_t));
+	memset(rcinfo, 0, sizeof(rc_info_t));
+	gettimeofday(&now,NULL);	
+	
+	/* source IP / port */
+	setip_to_rcinfo(rcinfo, addr, 0);
+	/* destination IP / port */
+	setip_to_rcinfo(rcinfo, &ourip, 1);	                        
+
+        //rcinfo->dst_port   = ntohs(req->socket.port);
+        rcinfo->ip_proto   = get_uinttransport(req->socket.type);
+        rcinfo->time_sec   = now.tv_sec;
+        rcinfo->time_usec  = now.tv_usec;
+        //rcinfo->uuid       = owner_chan_ref ? (char *)owner_chan_ref->uniqueid : "<NULL>";
+        rcinfo->uuid       = (char *)p->callid;
+        //rcinfo->uuid	   = (char *) "nnn";
+        rcinfo->proto_type = 0x01;
+
+	//res = send_hepv3 (sipsock, rcinfo, req->data->str, ast_str_strlen(req->data), 0);
+	res = send_hepv3 (sipsock, rcinfo, reqcpy.data->str, ast_str_strlen(reqcpy.data), 0);
+	        
+	if (res == -1) {
+		switch (errno) {
+		case EBADF: 		/* Bad file descriptor - seems like this is generated when the host exist, but doesn't accept the UDP packet */
+		case EHOSTUNREACH: 	/* Host can't be reached */
+		case ENETDOWN: 		/* Interface down */
+		case ENETUNREACH:	/* Network failure */
+		case ECONNREFUSED:      /* ICMP port unreachable */
+			res = XMIT_ERROR;	/* Don't bother with trying to transmit again */
+		}
+	}
+	
+	free(rcinfo);
+        ast_str_reset(reqcpy.data);
+	
+	/* 
+	if (res != ast_str_strlen(req->data)) {
+		ast_verbose("sip_xmit of %p (len %zu) to %s returned %d: %s\n", req->data, ast_str_strlen(req->data), ast_sockaddr_stringify(&hepserver), res, strerror(errno));
+	}
+	*/
+	
+	/* HEP END */
+
 	if (p->do_history) /* This is a request or response, note what it was for */
 		append_history(p, "Rx", "%s / %s / %s", ast_str_buffer(req->data), sip_get_header(req, "CSeq"), REQ_OFFSET_TO_STR(req, rlpart2));
 
@@ -32304,6 +32479,9 @@ static int reload_config(enum channelrel
 		acl_change_event_subscribe();
 	}
 
+	/* HEP reload */
+	hep_reload(reason);
+
 	return 0;
 }
 
@@ -32593,6 +32771,7 @@ static int sip_set_rtp_peer(struct ast_c
 	if (instance) {
 		changed |= ast_rtp_instance_get_and_cmp_remote_address(instance, &p->redirip);
 
+		/* HEP */
 		if (p->rtp) {
 			/* Prevent audio RTCP reads */
 			ast_channel_set_fd(chan, 1, -1);
diff -udprP certified-asterisk-11.6-cert11.orig/channels/hep.h certified-asterisk-11.6-cert11/channels/hep.h
--- certified-asterisk-11.6-cert11.orig/channels/hep.h	1970-01-01 01:00:00.000000000 +0100
+++ certified-asterisk-11.6-cert11/channels/hep.h	2015-09-09 16:25:43.000000000 +0200
@@ -0,0 +1,421 @@
+#include <netinet/ip.h>
+#include <netinet/tcp.h>
+#include <netinet/udp.h>
+
+#ifdef USE_IPV6
+#include <netinet/ip6.h>
+#endif /* USE_IPV6 */
+
+/* HEPv3 types */
+
+struct rc_info {
+    uint8_t     ip_family; /* IP family IPv6 IPv4 */
+    uint8_t     ip_proto; /* IP protocol ID : tcp/udp */
+    uint8_t     proto_type; /* SIP: 0x001, SDP: 0x03*/
+    struct in_addr src_ip;
+    struct in_addr dst_ip;      /* source and dest address */
+#ifdef USE_IPV6
+    struct in6_addr src_ip6;        /* source address */
+    struct in6_addr dst_ip6;        /* destination address */
+#endif
+    uint16_t    src_port;
+    uint16_t    dst_port;
+    uint32_t    time_sec;
+    uint32_t    time_usec;
+    char        *uuid;
+};
+
+typedef struct rc_info rc_info_t;
+
+struct hep_chunk {
+       u_int16_t vendor_id;
+       u_int16_t type_id;
+       u_int16_t length;
+} __attribute__((packed));
+
+typedef struct hep_chunk hep_chunk_t;
+
+struct hep_chunk_uint8 {
+       hep_chunk_t chunk;
+       u_int8_t data;
+} __attribute__((packed));
+
+typedef struct hep_chunk_uint8 hep_chunk_uint8_t;
+
+struct hep_chunk_uint16 {
+       hep_chunk_t chunk;
+       u_int16_t data;
+} __attribute__((packed));
+
+typedef struct hep_chunk_uint16 hep_chunk_uint16_t;
+
+struct hep_chunk_uint32 {
+       hep_chunk_t chunk;
+       u_int32_t data;
+} __attribute__((packed));
+
+typedef struct hep_chunk_uint32 hep_chunk_uint32_t;
+
+struct hep_chunk_str {
+       hep_chunk_t chunk;
+       char *data;
+} __attribute__((packed));
+
+typedef struct hep_chunk_str hep_chunk_str_t;
+
+struct hep_chunk_ip4 {
+       hep_chunk_t chunk;
+       struct in_addr data;
+} __attribute__((packed));
+
+typedef struct hep_chunk_ip4 hep_chunk_ip4_t;
+
+struct hep_chunk_ip6 {
+       hep_chunk_t chunk;
+       struct in6_addr data;
+} __attribute__((packed));
+
+typedef struct hep_chunk_ip6 hep_chunk_ip6_t;
+
+struct hep_ctrl {
+    char id[4];
+    u_int16_t length;
+} __attribute__((packed));
+
+typedef struct hep_ctrl hep_ctrl_t;
+
+struct hep_chunk_payload {
+    hep_chunk_t chunk;
+    char *data;
+} __attribute__((packed));
+
+typedef struct hep_chunk_payload hep_chunk_payload_t;
+
+/* Structure of HEP */
+
+struct hep_generic {
+        hep_ctrl_t         header;
+        hep_chunk_uint8_t  ip_family;
+        hep_chunk_uint8_t  ip_proto;
+        hep_chunk_uint16_t src_port;
+        hep_chunk_uint16_t dst_port;
+        hep_chunk_uint32_t time_sec;
+        hep_chunk_uint32_t time_usec;
+        hep_chunk_uint8_t  proto_t;
+        hep_chunk_uint32_t capt_id;
+} __attribute__((packed));
+
+typedef struct hep_generic hep_generic_t;
+
+struct hep_hdr{
+    u_int8_t hp_v;            /* version */
+    u_int8_t hp_l;            /* length */
+    u_int8_t hp_f;            /* family */
+    u_int8_t hp_p;            /* protocol */
+    u_int16_t hp_sport;       /* source port */
+    u_int16_t hp_dport;       /* destination port */
+};
+
+struct hep_timehdr{
+    u_int32_t tv_sec;         /* seconds */
+    u_int32_t tv_usec;        /* useconds */
+    u_int16_t captid;         /* Capture ID node */
+};
+
+struct hep_iphdr{
+        struct in_addr hp_src;
+        struct in_addr hp_dst;      /* source and dest address */
+};
+
+#ifdef USE_IPV6
+struct hep_ip6hdr {
+        struct in6_addr hp6_src;        /* source address */
+        struct in6_addr hp6_dst;        /* destination address */
+};
+#endif
+
+
+static char capture_host[MAXHOSTNAMELEN];
+static char capture_password[MAXHOSTNAMELEN];
+static int  capture_enabled = 1;
+
+#define CAPTURE_HOSTPORT "192.168.0.4:9061"
+
+struct ast_sockaddr hepserver = { { 0, 0, }, };
+
+/* set IP rcinfo */
+static inline int setip_to_rcinfo(rc_info_t *rcinfo, struct ast_sockaddr *ip, int type)
+{
+
+    if(ast_sockaddr_is_ipv4(ip)) {
+        inet_pton(AF_INET, ast_sockaddr_stringify_addr(ip), type ? &rcinfo->dst_ip : &rcinfo->src_ip);
+        rcinfo->ip_family = AF_INET;
+    }
+#ifdef USE_IPV6
+    else {
+        inet_pton(AF_INET6, ast_sockaddr_stringify_addr(ip), type ? &rcinfo->dst_ip6 : &rcinfo->src_ip6);
+        rcinfo->ip_family = AF_INET6;
+
+    }
+#endif
+
+
+    if(type) rcinfo->dst_port = ast_sockaddr_port(ip);
+    else rcinfo->src_port  = ast_sockaddr_port(ip);
+
+    return 1;
+}
+
+/* send_hepv3 */
+static inline int send_hepv3 (int sock, rc_info_t *rcinfo, char *json, int len, unsigned int sendzip)
+{
+    struct hep_generic *hg=NULL;
+    void* buffer;
+    unsigned int buflen=0, iplen=0,tlen=0;
+    hep_chunk_ip4_t src_ip4, dst_ip4;
+#ifdef USE_IPV6
+    hep_chunk_ip6_t src_ip6, dst_ip6;
+#endif
+    hep_chunk_t payload_chunk;
+    hep_chunk_t authkey_chunk;
+    hep_chunk_t uuid_chunk;
+    //static int errors = 0;
+    unsigned int res = 0;
+
+    if(capture_enabled == 0) return 0;
+    
+    hg = malloc(sizeof(struct hep_generic));
+    memset(hg, 0, sizeof(struct hep_generic));
+
+    /* header set */
+    memcpy(hg->header.id, "\x48\x45\x50\x33", 4);
+
+    /* IP proto */
+    hg->ip_family.chunk.vendor_id = htons(0x0000);
+    hg->ip_family.chunk.type_id   = htons(0x0001);
+    hg->ip_family.data = rcinfo->ip_family;
+    hg->ip_family.chunk.length = htons(sizeof(hg->ip_family));
+
+
+    /* Proto ID */
+    hg->ip_proto.chunk.vendor_id = htons(0x0000);
+    hg->ip_proto.chunk.type_id   = htons(0x0002);
+    hg->ip_proto.data = rcinfo->ip_proto;
+    hg->ip_proto.chunk.length = htons(sizeof(hg->ip_proto));
+
+
+ /* IPv4 */
+    if(rcinfo->ip_family == AF_INET) {
+        /* SRC IP */
+        src_ip4.chunk.vendor_id = htons(0x0000);
+        src_ip4.chunk.type_id   = htons(0x0003);
+        src_ip4.data = rcinfo->src_ip;
+        //inet_pton(AF_INET, rcinfo->src_ip, &src_ip4.data);
+        src_ip4.chunk.length = htons(sizeof(src_ip4));
+        /* DST IP */
+        dst_ip4.chunk.vendor_id = htons(0x0000);
+        dst_ip4.chunk.type_id   = htons(0x0004);
+        //inet_pton(AF_INET, rcinfo->dst_ip, &dst_ip4.data);
+        dst_ip4.data = rcinfo->dst_ip;
+        dst_ip4.chunk.length = htons(sizeof(dst_ip4));
+
+        iplen = sizeof(dst_ip4) + sizeof(src_ip4);
+    }
+#ifdef USE_IPV6
+      /* IPv6 */
+    else if(rcinfo->ip_family == AF_INET6) {
+        /* SRC IPv6 */
+        src_ip6.chunk.vendor_id = htons(0x0000);
+        src_ip6.chunk.type_id   = htons(0x0005);
+        //inet_pton(AF_INET6, rcinfo->src_ip, &src_ip6.data);
+        src_ip6.data = rcinfo->src_ip6;
+        src_ip6.chunk.length = htonl(sizeof(src_ip6));
+
+        /* DST IPv6 */
+        dst_ip6.chunk.vendor_id = htons(0x0000);
+        dst_ip6.chunk.type_id   = htons(0x0006);
+        //inet_pton(AF_INET6, rcinfo->dst_ip, &dst_ip6.data);
+        dst_ip6.data = rcinfo->dst_ip6;
+        dst_ip6.chunk.length = htonl(sizeof(dst_ip6));
+
+        iplen = sizeof(dst_ip6) + sizeof(src_ip6);
+    }
+#endif
+
+    /* SRC PORT */
+    hg->src_port.chunk.vendor_id = htons(0x0000);
+    hg->src_port.chunk.type_id   = htons(0x0007);
+    hg->src_port.data = htons(rcinfo->src_port);
+    hg->src_port.chunk.length = htons(sizeof(hg->src_port));
+
+    /* DST PORT */
+    hg->dst_port.chunk.vendor_id = htons(0x0000);
+    hg->dst_port.chunk.type_id   = htons(0x0008);
+    hg->dst_port.data = htons(rcinfo->dst_port);
+    hg->dst_port.chunk.length = htons(sizeof(hg->dst_port));
+
+ /* TIMESTAMP SEC */
+    hg->time_sec.chunk.vendor_id = htons(0x0000);
+    hg->time_sec.chunk.type_id   = htons(0x0009);
+    hg->time_sec.data = htonl(rcinfo->time_sec);
+    hg->time_sec.chunk.length = htons(sizeof(hg->time_sec));
+
+
+    /* TIMESTAMP USEC */
+    hg->time_usec.chunk.vendor_id = htons(0x0000);
+    hg->time_usec.chunk.type_id   = htons(0x000a);
+    hg->time_usec.data = htonl(rcinfo->time_usec);
+    hg->time_usec.chunk.length = htons(sizeof(hg->time_usec));
+
+    /* Protocol TYPE */
+    hg->proto_t.chunk.vendor_id = htons(0x0000);
+    hg->proto_t.chunk.type_id   = htons(0x000b);
+    hg->proto_t.data = rcinfo->proto_type;
+    hg->proto_t.chunk.length = htons(sizeof(hg->proto_t));
+
+    /* Capture ID */
+    hg->capt_id.chunk.vendor_id = htons(0x0000);
+    hg->capt_id.chunk.type_id   = htons(0x000c);
+    hg->capt_id.data = htonl(0x0001);
+    hg->capt_id.chunk.length = htons(sizeof(hg->capt_id));
+
+
+    /* Payload */
+    payload_chunk.vendor_id = htons(0x0000);
+    payload_chunk.type_id   = sendzip ? htons(0x0010) : htons(0x000f);
+    payload_chunk.length    = htons(sizeof(payload_chunk) + len);
+
+
+
+
+    tlen = sizeof(struct hep_generic) + len + iplen + sizeof(hep_chunk_t);
+/* auth key */
+    if(capture_password != NULL) {
+
+          tlen += sizeof(hep_chunk_t);
+          /* Auth key */
+          authkey_chunk.vendor_id = htons(0x0000);
+          authkey_chunk.type_id   = htons(0x000e);
+          authkey_chunk.length    = htons(sizeof(authkey_chunk) + strlen(capture_password));
+          tlen += strlen(capture_password);
+    }
+
+    /* UUID */
+    tlen += sizeof(hep_chunk_t);
+    uuid_chunk.vendor_id = htons(0x0000);
+    uuid_chunk.type_id   = htons(0x0011);
+    uuid_chunk.length    = htons(sizeof(uuid_chunk) + strlen(rcinfo->uuid));
+    tlen += strlen(rcinfo->uuid);
+
+    /* total */
+    hg->header.length = htons(tlen);
+
+    //fprintf(stderr, "LEN: [%d] vs [%d] = IPLEN:[%d] LEN:[%d] CH:[%d]\n", hg->header.length, ntohs(hg->header.length), iplen, len, sizeof(struct hep_chunk));
+
+    buffer = (void*)malloc(tlen);
+    if (buffer==0){
+        fprintf(stderr,"ERROR: out of memory\n");
+        free(hg);
+        return 1;
+    }
+    
+
+
+    memcpy((void*) buffer, hg, sizeof(struct hep_generic));
+    buflen = sizeof(struct hep_generic);
+
+    /* IPv4 */
+    if(rcinfo->ip_family == AF_INET) {
+        /* SRC IP */
+        memcpy((void*) buffer+buflen, &src_ip4, sizeof(struct hep_chunk_ip4));
+        buflen += sizeof(struct hep_chunk_ip4);
+
+        memcpy((void*) buffer+buflen, &dst_ip4, sizeof(struct hep_chunk_ip4));
+        buflen += sizeof(struct hep_chunk_ip4);
+    }
+#ifdef USE_IPV6
+      /* IPv6 */
+    else if(rcinfo->ip_family == AF_INET6) {
+        /* SRC IPv6 */
+        memcpy((void*) buffer+buflen, &src_ip4, sizeof(struct hep_chunk_ip6));
+        buflen += sizeof(struct hep_chunk_ip6);
+
+        memcpy((void*) buffer+buflen, &dst_ip6, sizeof(struct hep_chunk_ip6));
+        buflen += sizeof(struct hep_chunk_ip6);
+    }
+#endif
+
+
+    /* AUTH KEY CHUNK */
+    if(capture_password != NULL) {
+
+        memcpy((void*) buffer+buflen, &authkey_chunk,  sizeof(struct hep_chunk));
+        buflen += sizeof(struct hep_chunk);
+
+        /* Now copying payload self */
+        memcpy((void*) buffer+buflen, capture_password, strlen(capture_password));
+        buflen+=strlen(capture_password);
+    }
+
+
+
+    /* UUID */
+    memcpy((void*) buffer+buflen, &uuid_chunk,  sizeof(struct hep_chunk));
+    buflen += sizeof(struct hep_chunk);
+    /* Now copying payload self */
+    memcpy((void*) buffer+buflen, rcinfo->uuid, strlen(rcinfo->uuid));
+    buflen+=strlen(rcinfo->uuid);
+
+    /* PAYLOAD CHUNK */
+    memcpy((void*) buffer+buflen, &payload_chunk,  sizeof(struct hep_chunk));
+    buflen +=  sizeof(struct hep_chunk);
+
+    /* Now copying payload self */
+    memcpy((void*) buffer+buflen, json, len);
+    buflen+=len;
+
+
+
+    res = ast_sendto(sock, buffer, buflen, 0, &hepserver);
+
+    /* FREE */
+    if(buffer) free(buffer);
+    if(hg) free(hg);
+
+    return res;
+}
+
+static int hep_reload(int reload)
+{
+	struct ast_config *cfg;
+	const char *s;
+	struct ast_flags config_flags = { reload ? CONFIG_FLAG_FILEUNCHANGED : 0 };
+
+	cfg = ast_config_load2("hep.conf", "hep", config_flags);
+	if (cfg == CONFIG_STATUS_FILEMISSING || cfg == CONFIG_STATUS_FILEUNCHANGED || cfg == CONFIG_STATUS_FILEINVALID) {
+		return 0;
+	}
+	ast_copy_string(capture_host, CAPTURE_HOSTPORT, sizeof(capture_host));
+
+	if (cfg) {
+		if ((s = ast_variable_retrieve(cfg, "general", "capture_address"))) {
+		        ast_copy_string(capture_host, s, sizeof(capture_host));
+		}
+		if ((s = ast_variable_retrieve(cfg, "general", "capture_password"))) {
+		        ast_copy_string(capture_password, s, sizeof(capture_password));
+		}
+		if ((s = ast_variable_retrieve(cfg, "general", "enabled"))) {
+		        if(!strncmp("no", s, 2)) capture_enabled = 0;
+		}
+		ast_config_destroy(cfg);
+	}
+
+	ast_verbose("\r\nFOOO: hep_reload host is [%s]\n", capture_host);
+
+	if (!ast_sockaddr_parse(&hepserver, capture_host, 0)) {
+		ast_log(LOG_WARNING, "Unable to sock parse\n");
+	}
+
+	return 0;
+}
+
diff -udprP certified-asterisk-11.6-cert11.orig/configs/hep.conf.sample certified-asterisk-11.6-cert11/configs/hep.conf.sample
--- certified-asterisk-11.6-cert11.orig/configs/hep.conf.sample	1970-01-01 01:00:00.000000000 +0100
+++ certified-asterisk-11.6-cert11/configs/hep.conf.sample	2015-09-09 16:35:06.000000000 +0200
@@ -0,0 +1,15 @@
+;
+; res_hep Module configuration for Asterisk
+;
+
+; All settings are currently set in the general section.
+[general]
+enabled = yes                      ; Enable/disable forwarding of packets to a
+                                   ; HEP server. Default is "yes".
+capture_address = 10.0.0.1:9060 ; The address of the HEP capture server.
+capture_password = foo             ; If specified, the authorization passsword
+                                   ; for the HEP server. If not specified, no
+                                   ; authorization password will be sent.
+capture_id = 1234                  ; A unique integer identifier for this
+                                   ; server. This ID will be embedded sent
+                                   ; with each packet from this server.
diff -udprP certified-asterisk-11.6-cert11.orig/include/asterisk/rtp_engine.h certified-asterisk-11.6-cert11/include/asterisk/rtp_engine.h
--- certified-asterisk-11.6-cert11.orig/include/asterisk/rtp_engine.h	2014-07-01 17:37:11.000000000 +0200
+++ certified-asterisk-11.6-cert11/include/asterisk/rtp_engine.h	2015-09-09 12:28:09.000000000 +0200
@@ -716,6 +716,12 @@ struct ast_rtp_instance *ast_rtp_instanc
  */
 int ast_rtp_instance_destroy(struct ast_rtp_instance *instance);
 
+/* HEP */
+void ast_rtp_instance_set_uuid(struct ast_rtp_instance *instance, void *uuid);
+
+char *ast_rtp_instance_get_uuid(struct ast_rtp_instance *instance);
+/* HEP END */
+
 /*!
  * \brief Set the data portion of an RTP instance
  *
diff -udprP certified-asterisk-11.6-cert11.orig/main/rtp_engine.c certified-asterisk-11.6-cert11/main/rtp_engine.c
--- certified-asterisk-11.6-cert11.orig/main/rtp_engine.c	2014-07-01 17:37:11.000000000 +0200
+++ certified-asterisk-11.6-cert11/main/rtp_engine.c	2015-09-09 12:28:09.000000000 +0200
@@ -79,6 +79,8 @@ struct ast_rtp_instance {
 	struct ast_channel *chan;
 	/*! SRTP info associated with the instance */
 	struct ast_srtp *srtp;
+	/* HEP */
+	void *uuid;
 };
 
 /*! List of RTP engines that are currently registered */
@@ -2014,6 +2016,18 @@ struct ast_channel *ast_rtp_instance_get
 	return instance->chan;
 }
 
+/* HEP */
+void ast_rtp_instance_set_uuid(struct ast_rtp_instance *instance, void *uuid)
+{
+        instance->uuid = uuid;
+}
+
+char *ast_rtp_instance_get_uuid(struct ast_rtp_instance *instance)
+{
+        return (char*)instance->uuid;
+}
+/* HEP END */
+
 int ast_rtp_engine_register_srtp(struct ast_srtp_res *srtp_res, struct ast_srtp_policy_res *policy_res)
 {
 	if (res_srtp || res_srtp_policy) {
diff -udprP certified-asterisk-11.6-cert11.orig/res/res_rtp_asterisk.c certified-asterisk-11.6-cert11/res/res_rtp_asterisk.c
--- certified-asterisk-11.6-cert11.orig/res/res_rtp_asterisk.c	2014-07-01 17:37:11.000000000 +0200
+++ certified-asterisk-11.6-cert11/res/res_rtp_asterisk.c	2015-09-09 12:29:21.000000000 +0200
@@ -70,6 +70,7 @@ ASTERISK_FILE_VERSION(__FILE__, "$Revisi
 #include "asterisk/unaligned.h"
 #include "asterisk/module.h"
 #include "asterisk/rtp_engine.h"
+#include "../channels/hep.h"
 #include "asterisk/test.h"
 
 #define MAX_TIMESTAMP_SKEW	640
@@ -2548,6 +2549,13 @@ static int ast_rtcp_write_rr(struct ast_
 	int ice;
 	double rxlost_current;
 	struct ast_sockaddr remote_address = { {0,} };
+	/* HEP */
+	struct ast_sockaddr ourip;
+	char json[512];
+	int my_len;
+	rc_info_t *rcinfo = NULL;
+	int res2;
+	/* HEP END */
 
 	if (!rtp || !rtp->rtcp)
 		return 0;
@@ -2615,6 +2623,36 @@ static int ast_rtcp_write_rr(struct ast_
 		return 0;
 	}
 
+	/* HEP */
+	sprintf(json, "FIXME_WRITE_RR");
+	my_len = strlen(json);
+
+	ast_sockaddr_copy(&ourip, &rtp->rtcp->us);
+	ast_ouraddrfor(&rtp->rtcp->them, &ourip);
+
+	rcinfo = malloc(sizeof(rc_info_t));
+	memset(rcinfo, 0, sizeof(rc_info_t));
+
+	/* source IP / port */
+	setip_to_rcinfo(rcinfo, &ourip, 0);
+	/* destination IP / port */
+	setip_to_rcinfo(rcinfo, &rtp->rtcp->them, 1);
+
+	rcinfo->ip_proto   = IPPROTO_UDP;
+	rcinfo->time_sec   = now.tv_sec;
+	rcinfo->time_usec  = now.tv_usec;
+
+	rcinfo->uuid       = ast_rtp_instance_get_uuid(instance);
+	rcinfo->proto_type = 0x05;
+
+	res2 = send_hepv3 (rtp->rtcp->s, rcinfo, (char *)json, my_len, 0);
+	if (res2 < 0) {
+	ast_log(LOG_ERROR, "RTCP SR HEOP transmission error to %s, rtcp halted %s\n",
+		ast_sockaddr_stringify(&rtp->rtcp->them),
+		strerror(errno));
+	}
+	/* HEP END */
+
 	rtp->rtcp->rr_count++;
 
 #ifdef USE_PJPROJECT
@@ -2660,6 +2698,13 @@ static int ast_rtcp_write_sr(struct ast_
 	int rate = rtp_get_rate(&rtp->f.subclass.format);
 	int ice;
 	struct ast_sockaddr remote_address = { {0,} };
+	/* HEP */
+	struct ast_sockaddr ourip;
+	rc_info_t *rcinfo = NULL;
+	int res2;
+	char json[512];
+	int my_len;
+	/* HEP END */
 
 	if (!rtp || !rtp->rtcp)
 		return 0;
@@ -2730,6 +2775,54 @@ static int ast_rtcp_write_sr(struct ast_
 
 	rtp->rtcp->lastsrtxcount = rtp->txcount;
 
+	/* HEP */
+	unsigned long ntp_timestamp_sec = (unsigned long) ntohl(rtcpheader[2]);
+	unsigned int packets = rtp->txcount;
+	unsigned long ntp_timestamp_usec = (unsigned long) ntohl(rtcpheader[3]) * 4096;
+	unsigned int octets = rtp->txoctetcount;
+	unsigned long rtp_timestamp = (unsigned long) ntohl(rtcpheader[4]);
+	unsigned int ssrc = rtp->ssrc;
+	unsigned int source_ssrc = rtp->themssrc;
+	unsigned int highest_seq_no = (rtp->cycles) | ((rtp->lastrxseqno & 0xffff));
+	unsigned int fraction_lost = ((fraction & 0xff) << 24) | (lost & 0xffffff);
+	unsigned int ia_jitter = (unsigned int)(rtp->rxjitter * rate);
+	unsigned int packets_lost = rtp->rtcp->rxlost_count;
+	int lsr = rtp->rtcp->themrxlsr;
+	int my_dlsr = (((dlsr.tv_sec * 1000) + (dlsr.tv_usec / 1000)) * 65536) / 1000;
+	unsigned int report_count = rtp->rtcp->rr_count;
+
+	sprintf(json, "{\"sender_information\":{\"ntp_timestamp_sec\":%lu,\"packets\":%u,\"ntp_timestamp_usec\":%010lu,\"octets\":%u,\"rtp_timestamp\":%lu},\"ssrc\":%u,\"type\":200,\"report_blocks\":[{\"source_ssrc\":%u,\"highest_seq_no\":%u,\"fraction_lost\":%u,\"ia_jitter\":%u,\"packets_lost\":%u,\"lsr\":%i,\"dlsr\":%i}],\"report_count\":%u}",ntp_timestamp_sec,packets,ntp_timestamp_usec,octets,rtp_timestamp,ssrc,source_ssrc,highest_seq_no,fraction_lost,ia_jitter,packets_lost,lsr,my_dlsr,report_count);
+	my_len = strlen(json);
+
+	ast_sockaddr_copy(&ourip, &rtp->rtcp->us);
+	ast_ouraddrfor(&rtp->rtcp->them, &ourip);
+
+	rcinfo = malloc(sizeof(rc_info_t));
+	memset(rcinfo, 0, sizeof(rc_info_t));
+
+	/* source IP / port */
+	setip_to_rcinfo(rcinfo, &ourip, 0);
+	/* destination IP / port */
+	setip_to_rcinfo(rcinfo, &rtp->rtcp->them, 1);
+
+	rcinfo->ip_proto   = IPPROTO_UDP;
+	rcinfo->time_sec   = now.tv_sec;
+	rcinfo->time_usec  = now.tv_usec;
+	rcinfo->uuid       = ast_rtp_instance_get_uuid(instance);
+	rcinfo->proto_type = 0x05;
+
+	res2 = send_hepv3(rtp->rtcp->s, rcinfo, (char *)json, my_len, 0);
+
+	if (res2 < 0) {
+		ast_log(LOG_ERROR, "RTCP SR HEOP transmission error to %s, rtcp halted %s\n",
+			ast_sockaddr_stringify(&rtp->rtcp->them),
+			strerror(errno));
+		ast_verbose("ERRROR SR\r\n");
+	}
+
+	free(rcinfo);
+	/* HEP END */
+
 #ifdef USE_PJPROJECT
 	update_address_with_ice_candidate(rtp, AST_RTP_ICE_COMPONENT_RTCP, &remote_address);
 #endif
@@ -3442,6 +3535,11 @@ static struct ast_frame *ast_rtcp_read(s
 	unsigned int *rtcpheader = (unsigned int *)(rtcpdata + AST_FRIENDLY_OFFSET);
 	int res, packetwords, position = 0;
 	struct ast_frame *f = &ast_null_frame;
+	/* HEP */
+	struct ast_sockaddr ourip;
+	rc_info_t *rcinfo = NULL;
+	int res2;
+	/* HEP END */
 
 	/* Read in RTCP data from the socket */
 	if ((res = rtcp_recvfrom(instance, rtcpdata + AST_FRIENDLY_OFFSET,
@@ -3530,6 +3628,14 @@ static struct ast_frame *ast_rtcp_read(s
 			continue;
 		}
 
+		/* HEP */
+		unsigned long ntp_timestamp_sec;
+		unsigned long ntp_timestamp_usec;
+		unsigned long rtp_timestamp;
+		unsigned long senders_packet_count;
+		unsigned long senders_octet_count;
+		/* HEP END */
+
 		switch (pt) {
 		case RTCP_PT_SR:
 			gettimeofday(&rtp->rtcp->rxlsr,NULL); /* To be able to populate the dlsr */
@@ -3537,6 +3643,14 @@ static struct ast_frame *ast_rtcp_read(s
 			rtp->rtcp->soc = ntohl(rtcpheader[i + 4]);
 			rtp->rtcp->themrxlsr = ((ntohl(rtcpheader[i]) & 0x0000ffff) << 16) | ((ntohl(rtcpheader[i + 1]) & 0xffff0000) >> 16); /* Going to LSR in RR*/
 
+			/* HEP */
+			ntp_timestamp_sec = (unsigned long) ntohl(rtcpheader[i]);
+			ntp_timestamp_usec = (unsigned long) ntohl(rtcpheader[i + 1]) * 4096;
+			rtp_timestamp = (unsigned long) ntohl(rtcpheader[i + 2]);
+			senders_packet_count = (unsigned long) ntohl(rtcpheader[i + 3]);
+			senders_octet_count = (unsigned long) ntohl(rtcpheader[i + 4]);
+			/* HEP END */
+
 			if (rtcp_debug_test_addr(&addr)) {
 				ast_verbose("NTP timestamp: %lu.%010lu\n", (unsigned long) ntohl(rtcpheader[i]), (unsigned long) ntohl(rtcpheader[i + 1]) * 4096);
 				ast_verbose("RTP timestamp: %lu\n", (unsigned long) ntohl(rtcpheader[i + 2]));
@@ -3697,6 +3811,57 @@ static struct ast_frame *ast_rtcp_read(s
 					      ((unsigned long) ntohl(rtcpheader[i + 4]) << 16) * 4096,
 					      ntohl(rtcpheader[i + 5])/65536.0);
 			}
+			/* HEP */
+			char json[512];
+			int my_len;
+
+			long fraction_lost = (((long) ntohl(rtcpheader[i + 1]) & 0xff000000) >> 24);
+			long highest_seq_no = (long) (ntohl(rtcpheader[i + 2])) >> 16;
+			unsigned int source_ssrc = rtcpheader[i + 1];
+
+			sprintf(json, "{\"sender_information\":{\"ntp_timestamp_sec\":%lu,\"packets\":%lu,\"ntp_timestamp_usec\":%010lu,\"octets\":%lu,\"rtp_timestamp\":%lu},\"ssrc\":0,\"type\":%d,\"report_blocks\":[{\"source_ssrc\":%u,\"highest_seq_no\":%ld,\"fraction_lost\":%ld,\"ia_jitter\":%u,\"packets_lost\":%u,\"lsr\":0,\"dlsr\":0}],\"report_count\":0}",
+			ntp_timestamp_sec,
+			senders_packet_count,
+			ntp_timestamp_usec,
+			senders_octet_count,
+			rtp_timestamp,
+			pt,
+			source_ssrc,
+			highest_seq_no,
+			fraction_lost,
+			rtp->rtcp->reported_jitter,
+			rtp->rtcp->reported_lost
+			);
+			my_len = strlen(json);
+			gettimeofday(&now,NULL);
+
+			ast_sockaddr_copy(&ourip, &rtp->rtcp->us);
+			ast_ouraddrfor(&rtp->rtcp->them, &ourip);
+
+			rcinfo = malloc(sizeof(rc_info_t));
+			memset(rcinfo, 0, sizeof(rc_info_t));
+
+			/* source IP / port */
+			setip_to_rcinfo(rcinfo, &rtp->rtcp->them, 0);
+			/* destination IP / port */
+			setip_to_rcinfo(rcinfo, &ourip, 1);
+
+			rcinfo->ip_proto   = IPPROTO_UDP;
+			rcinfo->time_sec   = now.tv_sec;
+			rcinfo->time_usec  = now.tv_usec;
+			rcinfo->uuid       = ast_rtp_instance_get_uuid(instance);
+			rcinfo->proto_type = 0x05;
+
+			res2 = send_hepv3 (rtp->rtcp->s, rcinfo, (char *)json, my_len, 0);
+			if (res2 < 0) {
+				ast_log(LOG_ERROR, "RTCP SR HEP transmission error to %s, rtcp halted %s\n",
+					ast_sockaddr_stringify(&rtp->rtcp->them),
+					strerror(errno));
+			}
+
+			free(rcinfo);
+			/* HEP END */
+
 			break;
 		case RTCP_PT_FUR:
 			if (rtcp_debug_test_addr(&addr))
@@ -4858,6 +5023,10 @@ static int rtp_reload(int reload)
 		rtpend = DEFAULT_RTP_END;
 	}
 	ast_verb(2, "RTP Allocating from port range %d -> %d\n", rtpstart, rtpend);
+
+	/* HEP reload */
+	hep_reload(reload);
+
 	return 0;
 }
 
